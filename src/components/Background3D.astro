---
---

<canvas id="background-canvas" class="fixed top-0 left-0 w-full h-full -z-10"></canvas>

<script>
import * as THREE from 'three';

let scene: THREE.Scene;
let camera: THREE.PerspectiveCamera;
let renderer: THREE.WebGLRenderer;
let particles: THREE.Points;
let mouseX = 0;
let mouseY = 0;
let targetX = 0;
let targetY = 0;

function init() {
    try {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

        const canvas = document.getElementById('background-canvas') as HTMLCanvasElement;
        if (!canvas) {
            console.error('Canvas element not found');
            return;
        }

        renderer = new THREE.WebGLRenderer({
            canvas,
            alpha: true,
            antialias: true
        });

        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

        // Create particles
        const geometry = new THREE.BufferGeometry();
        const particlesCount = 300; // Reduced number of particles
        const posArray = new Float32Array(particlesCount * 3);

        for(let i = 0; i < particlesCount * 3; i += 3) {
            // Create a more focused distribution
            const radius = (Math.random() * 3) + 1; // Between 1 and 4 units
            const theta = Math.random() * Math.PI * 2;
            const phi = Math.acos((Math.random() * 1.8) - 0.9); // More concentrated distribution

            posArray[i] = radius * Math.sin(phi) * Math.cos(theta);
            posArray[i + 1] = radius * Math.sin(phi) * Math.sin(theta);
            posArray[i + 2] = radius * Math.cos(phi);
        }

        geometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));

        const material = new THREE.PointsMaterial({
            size: 0.02, // Slightly larger individual particles
            color: '#94a3b8', // Softer color
            transparent: true,
            opacity: 0.6, // More transparent
            sizeAttenuation: true
        });

        particles = new THREE.Points(geometry, material);
        scene.add(particles);
        camera.position.z = 4; // Moved camera back slightly
    } catch (error) {
        console.error('Error initializing 3D background:', error);
    }
}

function animate() {
    if (!particles || !renderer || !scene || !camera) return;

    requestAnimationFrame(animate);

    // Smooth mouse movement
    targetX = mouseX * 0.0008; // Reduced sensitivity
    targetY = mouseY * 0.0008;

    particles.rotation.y += 0.0003; // Slower base rotation
    particles.rotation.x += (targetY - particles.rotation.x) * 0.03;
    particles.rotation.y += (targetX - particles.rotation.y) * 0.03;

    renderer.render(scene, camera);
}

function onMouseMove(event: MouseEvent) {
    if (!particles) return;

    // Update mouse position relative to the center of the screen
    mouseX = event.clientX - window.innerWidth / 2;
    mouseY = event.clientY - window.innerHeight / 2;
}

function onWindowResize() {
    if (!camera || !renderer) return;

    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

// Initialize everything
document.addEventListener('DOMContentLoaded', () => {
    init();
    animate();
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('resize', onWindowResize);
});

// Cleanup on page unload
window.addEventListener('unload', () => {
    window.removeEventListener('mousemove', onMouseMove);
    window.removeEventListener('resize', onWindowResize);

    if (particles) {
        particles.geometry.dispose();
        (particles.material as THREE.Material).dispose();
    }
    if (renderer) {
        renderer.dispose();
    }
});
</script>
